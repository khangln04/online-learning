import { useEffect, useState } from "react";
import axios from "axios";
import aiIcon from "../css/icon/AI.png";
import { useNavigate, Link } from "react-router-dom";
import Slider from "../Slider";
import Header from "../Component/Header";
import Footer from "../Component/Footer";
import { getCourses, getBanners, getBlogs, getFeedbacks, resolveImageUrl } from "../js/homepageApi";
import "../css/page/homepage.css";
import "../slider.css"; // ƒë·∫£m b·∫£o slider CSS ƒë∆∞·ª£c load
import { FaRegCalendarAlt, FaUser } from "react-icons/fa"; // Th√™m tr√™n c√πng file n·∫øu ch∆∞a c√≥
import favicon11 from "../css/icon/favicon11.png";

// D·ªØ li·ªáu m·∫´u cho users ƒë·ªÉ hi·ªÉn th·ªã role
const users = [
  { Name: 'Hi·ªÅn Trang', RoleId: 4 }, // H·ªçc sinh
  { Name: 'Th·∫ø Ph∆∞∆°ng', RoleId: 1 }, // Ph·ª• huynh
  { Name: 'Minh Anh', RoleId: 4 }, // H·ªçc sinh
  { Name: 'Ng·ªçc Lan', RoleId: 1 }, // Ph·ª• huynh
  // Th√™m c√°c user kh√°c n·∫øu c·∫ßn
];

// Map RoleId sang t√™n vai tr√≤
const roleMap = {
  1: 'Ph·ª• huynh',
  3: 'Ph·ª• huynh',
  4: 'H·ªçc sinh',
  5: 'H·ªçc sinh',
  6: 'H·ªçc sinh',
  7: 'Ph·ª• huynh',
};

const getUserRoleByName = (name) => {
  const user = users.find(u => u.Name === name);
  return user ? roleMap[user.RoleId] : null;
};

const HomePage = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [courses, setCourses] = useState([]);
  const [banners, setBanners] = useState([]);
  const [feedbacks, setFeedbacks] = useState([]);

  const [blogs, setBlogs] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("token");
    const role = localStorage.getItem("role");

    const allowed = !token || ["Pupil", "Parent"].includes(role);

    if (!allowed) {
      setTimeout(() => navigate("/error"), 0);
    }
  }, [navigate]);

  useEffect(() => {
    getCourses().then(setCourses).catch(console.error);
    getBanners().then(setBanners).catch(console.error);
    getBlogs().then(setBlogs).catch(console.error);
    getFeedbacks().then(setFeedbacks).catch(console.error); // th√™m d√≤ng n√†y

  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentIndex(prev => (prev + 1) % banners.length);
    }, 3000);
    return () => clearInterval(interval);
  }, [banners]);

  // ...existing code...

  return (
    <div className="homepage">
      <Header />

      {/* Hero Banner m·ªõi */}
      <section className="hero-banner-v2">
        <div className="hero-left">
          <div className="platform-badge">
      <img
        src={favicon11}
        alt="Logo c√° nh√¢n"
        style={{ width: 32, height: 32, verticalAlign: 'middle', marginRight: 8 }}
      />
      Platform H·ªçc Online #1 Vi·ªát Nam
    </div>
          <h1>
            H·ªçc t·∫≠p th√¥ng minh<br />
            c√πng <span className="educonnect">ActiveLearningSystem</span>
          </h1>
          <p className="hero-desc">
            N·ªÅn t·∫£ng h·ªçc online hi·ªán ƒë·∫°i v·ªõi h·ªá th·ªëng qu·∫£n l√Ω gia ƒë√¨nh th√¥ng minh. Ph·ª• huynh ki·ªÉm so√°t, con em h·ªçc t·∫≠p hi·ªáu qu·∫£.
          </p>
          <div className="hero-actions">
            <button className="btn-primary" onClick={() => navigate('/courselist')}>B·∫Øt ƒë·∫ßu h·ªçc ngay</button>
          </div>
          <div className="hero-stats">
            <div>
              <div className="stat-number">50K+</div>
              <div className="stat-label">H·ªçc vi√™n</div>
            </div>
            <div>
              <div className="stat-number">1000+</div>
              <div className="stat-label">Kh√≥a h·ªçc</div>
            </div>
            <div>
              <div className="stat-number">95%</div>
              <div className="stat-label">H√†i l√≤ng</div>
            </div>
          </div>
        </div>
        <div className="hero-right">
          <div className="hero-image-box">
            <img
              src={resolveImageUrl(banners[currentIndex]?.thumbnail, "banner")}
              alt="EduConnect h·ªçc t·∫≠p"
              className="hero-main-img"
            />
            <div className="hero-rating-badge">
              <span role="img" aria-label="star">‚≠ê</span> 4.9/5.0 Rating
            </div>
            <div className="hero-trust-badge">
              ‚úì ƒê∆∞·ª£c ph·ª• huynh tin t∆∞·ªüng
            </div>
          </div>
        </div>
      </section>

      {/* L·ª£i √≠ch */}
      <section className="section-benefits">
        <div className="benefits-grid">
          {[
            {
              icon: "üß†",
              title: "C√° nh√¢n h√≥a l·ªô tr√¨nh h·ªçc",
              desc: "M·ªói h·ªçc sinh ƒë·ªÅu c√≥ m·ªôt xu·∫•t ph√°t ƒëi·ªÉm v√† m·ª•c ti√™u ri√™ng. " +
                "H·ªá th·ªëng ALS ph√¢n t√≠ch h√†nh vi h·ªçc t·∫≠p, k·∫øt qu·∫£ ki·ªÉm tra v√† ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi h·ªçc " +
                "ƒë·ªÉ x√¢y d·ª±ng l·ªô tr√¨nh h·ªçc ph√π h·ª£p, gi√∫p h·ªçc sinh ti·∫øn b·ªô nhanh ch√≥ng v√† hi·ªáu qu·∫£ h∆°n. " +
                "ƒê√¢y l√† s·ª± kh√°c bi·ªát gi√∫p ALS ƒë·ªìng h√†nh s√¢u s√°t v·ªõi t·ª´ng c√° nh√¢n."
            },
            {
              icon: "üíª",
              title: "H·ªçc t·∫≠p m·ªçi l√∫c, m·ªçi n∆°i",
              desc: "V·ªõi n·ªÅn t·∫£ng h·ªçc tr·ª±c tuy·∫øn hi·ªán ƒë·∫°i, h·ªçc sinh c√≥ th·ªÉ tham gia c√°c kh√≥a h·ªçc m·ªçi l√∫c, m·ªçi n∆°i " +
                "ch·ªâ v·ªõi m·ªôt thi·∫øt b·ªã k·∫øt n·ªëi Internet. T·∫•t c·∫£ b√†i gi·∫£ng, b√†i t·∫≠p v√† t√†i nguy√™n h·ªçc t·∫≠p ƒë·ªÅu ƒë∆∞·ª£c truy c·∫≠p d·ªÖ d√†ng, " +
                "kh√¥ng gi·ªõi h·∫°n th·ªùi gian hay ƒë·ªãa ƒëi·ªÉm, mang l·∫°i s·ª± linh ho·∫°t t·ªëi ƒëa trong qu√° tr√¨nh h·ªçc."
            },
            {
              icon: "üìä",
              title: "Theo d√µi ti·∫øn ƒë·ªô & ƒë√°nh gi√° th√¥ng minh",
              desc: "H·ªá th·ªëng ALS li√™n t·ª•c ghi nh·∫≠n ti·∫øn tr√¨nh h·ªçc t·∫≠p c·ªßa ng∆∞·ªùi d√πng, " +
                "t·ª´ ƒë√≥ ƒë∆∞a ra ph√¢n t√≠ch chi ti·∫øt v·ªÅ m·ª©c ƒë·ªô ho√†n th√†nh, ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu v√† g·ª£i √Ω c·∫£i thi·ªán. " +
                "B·∫£ng x·∫øp h·∫°ng gi√∫p h·ªçc sinh c√≥ th√™m ƒë·ªông l·ª±c c·∫°nh tranh l√†nh m·∫°nh v√† ph√°t tri·ªÉn to√†n di·ªán k·ªπ nƒÉng."
            },
          ].map((item, idx) => (
            <div key={idx} className="benefit-card">
              <div className="benefit-icon">{item.icon}</div>
              <h3>{item.title}</h3>
              <p>{item.desc}</p>

            </div>
          ))}
        </div>
      </section>

      {/* Kh√≥a h·ªçc hot */}
      <section className="section-courses">
        <div className="courses-header">
          <div>
            <h2><span className="highlight">Kh√≥a h·ªçc</span>n·ªïi b·∫≠t</h2>
            <p className="courses-sub">Nh·ªØng kh√≥a h·ªçc ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t</p>
          </div>
          <Link to="/courselist" className="courses-viewall">Xem t·∫•t c·∫£</Link>
        </div>
        <div className="courses-grid">
          {courses.slice(0, 6).map((course, idx) => (
            <div key={idx} className="course-card">
              {/* Badge level & discount */}
              <div className="course-badges">
                {course.level && <span className={`badge badge-level badge-${course.level.toLowerCase()}`}>{course.level}</span>}
                {course.discount && <span className="badge badge-discount">-{course.discount}%</span>}
              </div>
              <div className="course-image">
                <img src={course.image} alt={course.courseName} />
              </div>
              <div className="course-info">
                <div className="course-category">
                  <span className="badge badge-category">{course.categoryName}</span>
                </div>
                <h3 className="course-title">{course.courseName}</h3>
                <p className="course-desc">{course.description}</p>
                <div className="course-teacher">
                  <FaUser className="teacher-avatar" />
                  <span>{course.authorName}</span>
                </div>
                <div className="course-price-row">
                  <span className="course-price">{course.price?.toLocaleString('vi-VN')}‚Ç´</span>
                  {course.oldPrice && <span className="course-oldprice">{course.oldPrice?.toLocaleString('vi-VN')}‚Ç´</span>}
                </div>
                <Link to={`/course/${course.courseId}`} className="course-register-btn">ƒêƒÉng k√Ω ngay</Link>
              </div>
            </div>
          ))}
          {/* S·ª≠a ƒë∆∞·ªùng d·∫´n sang /courselist */}
        </div>
      </section>

      {/* Feedback */}
      <div className="feedback-header">

      </div>
      <section className="section-feedback">
        <h2><span className="highlight">Ph·∫£n h·ªìi</span> ƒë√°nh gi√°</h2>
        <p className="feedback-sub">T·ª´ kh√°ch h√†ng</p>
        <Slider>
          {feedbacks.map((fb, idx) => (
            <div key={idx} className="slide-item">
              <div className="feedback">
                <img
                  src={resolveImageUrl(fb.avatar, "profile")}
                  alt={`${fb.authorName}'s avatar`}
                />
                <div>
                  {/* Hi·ªÉn th·ªã badge role n·ªïi b·∫≠t ph√≠a tr√™n */}
                  {getUserRoleByName(fb.authorName) && (
                    <div style={{
                      display: 'inline-block',
                      marginBottom: '8px',
                      background: getUserRoleByName(fb.authorName) === 'Ph·ª• huynh' ? '#1976d2' : '#43a047',
                      color: '#fff',
                      borderRadius: '8px',
                      padding: '4px 12px',
                      fontSize: '1rem',
                      fontWeight: 700,
                      boxShadow: '0 2px 8px rgba(0,0,0,0.08)'
                    }}>
                      {getUserRoleByName(fb.authorName)}
                    </div>
                  )}
                  <p className="role">Kh√≥a h·ªçc: {fb.courseName}</p>
                  <blockquote>"{fb.content}"</blockquote>
                  <p className="feedback-danhgia">
                    ƒê√°nh gi√°:{" "}
                    {[...Array(fb.rate)].map((_, i) => (
                      <span key={i}>‚≠ê</span>
                    ))}
                  </p>
                  <div className="feedback-meta">
                    <div className="feedback-meta-info">
                      <span className="feedback-date">
                        üìÜ {new Date(fb.createdDate).toLocaleDateString("vi-VN")}
                      </span>
                      <span className="feedback-author">
                        <FaUser />
                        {fb.authorName}
                        {/* ƒê√£ b·ªè badge role c·∫°nh t√™n user theo y√™u c·∫ßu */}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </Slider>
      </section>

      {/* B√†i vi·∫øt */}

      <section className="section-posts">
        <h2><span className="highlight">B√†i vi·∫øt</span> m·ªõi</h2>
        <p className="posts-subtitle">Th√¥ng tin m·ªõi nh·∫•t t·ª´ ƒë·ªôi ng≈© c·ªßa ch√∫ng t√¥i</p>
        <Slider>
          {blogs.map((post, idx) => {
            const blogId = post.blogId || post.id || post._id; // Th·ª≠ c√°c tr∆∞·ªùng c√≥ th·ªÉ
            if (!blogId) {
              console.warn(`‚ö†Ô∏è B√†i vi·∫øt t·∫°i index ${idx} kh√¥ng c√≥ ID h·ª£p l·ªá`, post);
              return null;
            }
            console.log(`üîç Blog ID for post ${idx}:`, blogId); // Debug ID
            return (
              <div key={blogId} className="slide-item">
                <div className="blog-card">
                  <img src={post.thumbnail} alt={post.title} />
                  <div className="card-content">
                    <div className="meta">
                      <span>
                        <FaRegCalendarAlt style={{ marginRight: "6px", color: "#888" }} />
                        {post.createdDate}
                      </span>
                      <span>
                        <FaUser style={{ marginRight: "6px", color: "#888" }} />
                        {post.authorName}
                      </span>
                    </div>
                    <h3> <Link to={`/blog/${blogId}`} className="blog-title-link">
                      {post.title}
                    </Link></h3>
                    <p>{post.summary}</p>
                    <div className="card-footer">
                      <Link
                        to={`/blog/${blogId}`} // S·ª≠ d·ª•ng blogId thay v√¨ post.id
                        className="read-more-link"
                      >
                        Xem th√™m
                      </Link>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </Slider>
      </section>

      <Footer />
    </div>
  );
};



function ChatBubble() {
  const [open, setOpen] = useState(false);
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);

  const handleInput = (e) => setInput(e.target.value);

  const sendMessage = async (msg) => {
    setMessages(msgs => [...msgs, { from: "user", text: msg }]);
    setInput("");
    setLoading(true);
    try {
      const res = await axios.post("https://localhost:5000/api/Chat", { message: msg });
      setMessages(msgs => [...msgs, { from: "bot", text: res.data.reply }]);
    } catch (err) {
      setMessages(msgs => [...msgs, { from: "bot", text: "Xin l·ªói, h·ªá th·ªëng ƒëang b·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau." }]);
    }
    setLoading(false);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter" && input.trim() && !loading) {
      sendMessage(input.trim());
    }
  };

  return (
    <>
      <div className="chat-bubble-btn" onClick={() => setOpen(o => !o)} title="B·∫°n c·∫ßn h·ªó tr·ª£? Chat v·ªõi AI!">
        <img src={aiIcon} alt="AI Chat" className="chat-bubble-btn-img" />
      </div>
      {open && (
        <div className="chat-bubble-window chat-bubble-window-left">
          <div className="chat-bubble-window-header">
           AI ChatBot
            <button className="chat-bubble-close" onClick={() => setOpen(false)}>√ó</button>
          </div>
          <div className="chat-bubble-window-body">
            <div className="chat-bubble-messages">
              {messages.map((msg, idx) => (
                <div key={idx} className={msg.from === 'user' ? 'chat-msg-user' : 'chat-msg-bot'}>
                  <span className="chat-msg-text">{msg.text}</span>
                </div>
              ))}
              {loading && (
                <div className="chat-msg-bot chat-msg-loading">ƒêang tr·∫£ l·ªùi...</div>
              )}
            </div>
            <div className="chat-bubble-input-row">
              <input
                className="chat-bubble-input"
                type="text"
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                value={input}
                onChange={handleInput}
                onKeyDown={handleKeyDown}
                autoFocus
                disabled={loading}
              />
              <button
                className="chat-bubble-send-btn"
                onClick={() => {
                  if (input.trim() && !loading) {
                    sendMessage(input.trim());
                  }
                }}
                disabled={!input.trim() || loading}
                tabIndex={0}
              >G·ª≠i</button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

// Th√™m ChatBubble v√†o HomePage
const HomePageWithChat = () => {
  return (
    <>
      <HomePage />
      <ChatBubble />
    </>
  );
};

export default HomePageWithChat;
