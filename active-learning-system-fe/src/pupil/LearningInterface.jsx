import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import axios from 'axios';
import { useVideoProgress } from '../hooks/useVideoProgress';
import { resolveImageUrl } from '../js/homepageApi';
import '../css/pupil/learningInterface.css';
import aiIcon from '../css/icon/AI.png';
// ChatBubble component (copy from HomePage)
function ChatBubble() {
    const [open, setOpen] = useState(false);
    const [input, setInput] = useState("");
    const [messages, setMessages] = useState([]);
    const [loading, setLoading] = useState(false);

    const handleInput = (e) => setInput(e.target.value);

    const sendMessage = async (msg) => {
        setMessages(msgs => [...msgs, { from: "user", text: msg }]);
        setInput("");
        setLoading(true);
        try {
            const res = await axios.post("https://localhost:5000/api/Chat", { message: msg });
            setMessages(msgs => [...msgs, { from: "bot", text: res.data.reply }]);
        } catch (err) {
            setMessages(msgs => [...msgs, { from: "bot", text: "Xin l·ªói, h·ªá th·ªëng ƒëang b·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau." }]);
        }
        setLoading(false);
    };

    const handleKeyDown = (e) => {
        if (e.key === "Enter" && input.trim() && !loading) {
            sendMessage(input.trim());
        }
    };

    return (
        <>
            <div className="chat-bubble-btn" onClick={() => setOpen(o => !o)} title="B·∫°n c·∫ßn h·ªó tr·ª£? Chat v·ªõi AI!">
                <img src={aiIcon} alt="AI Chat" className="chat-bubble-btn-img" />
            </div>
            {open && (
                <div className="chat-bubble-window chat-bubble-window-left">
                    <div className="chat-bubble-window-header">
                     AI ChatBot
                        <button className="chat-bubble-close" onClick={() => setOpen(false)}>√ó</button>
                    </div>
                    <div className="chat-bubble-window-body">
                        <div className="chat-bubble-messages">
                            {messages.map((msg, idx) => (
                                <div key={idx} className={msg.from === 'user' ? 'chat-msg-user' : 'chat-msg-bot'}>
                                    <span className="chat-msg-text">{msg.text}</span>
                                </div>
                            ))}
                            {loading && (
                                <div className="chat-msg-bot chat-msg-loading">ƒêang tr·∫£ l·ªùi...</div>
                            )}
                        </div>
                        <div className="chat-bubble-input-row">
                            <input
                                className="chat-bubble-input"
                                type="text"
                                placeholder="Nh·∫≠p tin nh·∫Øn..."
                                value={input}
                                onChange={handleInput}
                                onKeyDown={handleKeyDown}
                                autoFocus
                                disabled={loading}
                            />
                            <button
                                className="chat-bubble-send-btn"
                                onClick={() => {
                                    if (input.trim() && !loading) {
                                        sendMessage(input.trim());
                                    }
                                }}
                                disabled={!input.trim() || loading}
                                tabIndex={0}
                            >G·ª≠i</button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}

const LearningInterface = () => {
    const { courseId, moduleId } = useParams();
    const navigate = useNavigate();
    const location = useLocation();
    const { studentCourseId, moduleProgressID, courseProgressId: passedCourseProgressId } = location.state || {};

    useEffect(() => {
        const token = localStorage.getItem("token");
        const role = localStorage.getItem("role");
    
        const allowed = !token || ["Pupil"].includes(role);
    
        if (!allowed) {
          setTimeout(() => navigate("/error"), 0);
        }
      }, [navigate]);

    // Course and Module states
    const [courseData, setCourseData] = useState(null);
    const [modules, setModules] = useState([]);
    const [expandedModules, setExpandedModules] = useState(new Set());
    const [courseProgressId, setCourseProgressId] = useState(null);

    // Current module and lesson states
    const [currentModule, setCurrentModule] = useState(null);
    const [lessons, setLessons] = useState([]);
    const [selectedLesson, setSelectedLesson] = useState(null);

    // Content type: 'module-overview', 'video', 'quiz-intro', 'quiz-taking'
    const [contentType, setContentType] = useState('module-overview');

    // Quiz states
    const [quizzes, setQuizzes] = useState([]);
    const [selectedQuiz, setSelectedQuiz] = useState(null);
    const [quizData, setQuizData] = useState(null);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [selectedAnswers, setSelectedAnswers] = useState({});
    const [quizStarted, setQuizStarted] = useState(false);
    const [timeLeft, setTimeLeft] = useState(0);
    const [userQuizId, setUserQuizId] = useState(null);

    // UI states
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');
    const [showMessage, setShowMessage] = useState(false);
    const [currentLessonProgress, setCurrentLessonProgress] = useState(null);
    // Tr·∫°ng th√°i loading khi submit quiz
    const [submitLoading, setSubmitLoading] = useState(false);

    // Video progress tracking
    const {
        videoRef,
        handlePlay,
        handlePause,
        handleTimeUpdate,
        handleEnded,
        initializeVideoProgress,
        saveCurrentProgress
    } = useVideoProgress(currentLessonProgress, async (newStatus) => {
        if (!newStatus || !selectedLesson) return;

        console.log('üéØ Video reached 90%, marking lesson as completed:', selectedLesson.lessonName);

        try {
            const token = localStorage.getItem('token');
            if (!token) {
                console.error('‚ùå Kh√¥ng t√¨m th·∫•y token, kh√¥ng th·ªÉ g·ªçi API update-watch-status');
                return;
            }

            // L·∫•y lessonProgressId hi·ªán t·∫°i (√©p ki·ªÉu s·ªë nguy√™n)
            let lessonProgressId = Number(currentLessonProgress?.id);

            // N·∫øu lessonProgressId kh√¥ng h·ª£p l·ªá th√¨ g·ªçi API l·∫•y l·∫°i
            if (!lessonProgressId || lessonProgressId <= 0 || isNaN(lessonProgressId)) {
                console.warn('‚ö†Ô∏è lessonProgressId kh√¥ng h·ª£p l·ªá, g·ªçi get-completion l·∫•y l·∫°i...');
                const res = await axios.get(
                    `https://localhost:5000/api/CourseProgress/get-completion/${studentCourseId}`,
                    { headers: { Authorization: `Bearer ${token}` } }
                );

                const refreshedModule = res.data.moduleCompletionVMs.find(m => m.id === currentModule?.id);
                const refreshedLesson = refreshedModule?.lessons.find(l => l.id === selectedLesson.id);
                lessonProgressId = Number(refreshedLesson?.lessonProgressId);

                if (!lessonProgressId || lessonProgressId <= 0 || isNaN(lessonProgressId)) {
                    console.error('‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c lessonProgressId h·ª£p l·ªá t·ª´ get-completion API, d·ª´ng c·∫≠p nh·∫≠t.');
                    return;
                }

                // C·∫≠p nh·∫≠t lessonProgressId m·ªõi v√†o state ƒë·ªÉ d√πng cho c√°c l·∫ßn sau
                setCurrentLessonProgress(prev => ({
                    ...prev,
                    id: lessonProgressId
                }));
            }

            // L·∫•y th·ªùi gian xem th·ª±c t·∫ø t·ª´ videoRef, ph·∫£i > 0 m·ªõi g·ªçi
            const currentTime = videoRef.current?.currentTime ?? 0;
            if (currentTime <= 0) {
                console.warn('‚ö†Ô∏è Video currentTime <= 0, ch∆∞a g·ªçi update-watch-status l·∫ßn n√†y');
                return; // Ch·ªù l·∫ßn kh√°c c√≥ th·ªùi gian xem r·ªìi m·ªõi g·ª≠i
            }

            console.log('üì§ G·ªçi API update-watch-status v·ªõi d·ªØ li·ªáu:', {
                LessonProgressId: lessonProgressId,
                WatchedSeconds: Math.floor(currentTime)
            });

            await axios.post(
                'https://localhost:5000/api/CourseProgress/update-watch-status',
                {
                    LessonProgressId: lessonProgressId,
                    WatchedSeconds: Math.floor(currentTime)
                },
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            console.log('‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i xem video th√†nh c√¥ng');

            // C·∫≠p nh·∫≠t state UI local
            setCurrentLessonProgress(prev => ({ ...prev, id: lessonProgressId, status: true }));
            setSelectedLesson(prev => ({ ...prev, status: true }));
            setLessons(prev => prev.map(lesson =>
                lesson.id === selectedLesson.id ? { ...lesson, status: true } : lesson
            ));
            setModules(prevModules => {
                const updatedModules = prevModules.map(module => {
                    if (module.id !== currentModule?.id) return module;

                    // Clone l·∫°i t·ª´ng lesson, c·∫≠p nh·∫≠t status n·∫øu l√† b√†i h·ªçc v·ª´a ho√†n th√†nh
                    const updatedLessons = module.lessons.map(lesson => {
                        if (lesson.id === selectedLesson.id) {
                            return { ...lesson, status: true };
                        }
                        return { ...lesson }; // Clone l·∫°i d√π ch∆∞a ho√†n th√†nh ƒë·ªÉ ƒë·∫£m b·∫£o React nh·∫≠n thay ƒë·ªïi
                    });

                    return {
                        ...module,
                        lessons: updatedLessons
                    };
                });

                // Ki·ªÉm tra xem c√≥ m·ªü quiz kh√¥ng
                const updatedModule = updatedModules.find(m => m.id === currentModule?.id);
                if (updatedModule) {
                    const completedLessons = updatedModule.lessons.filter(l => l.status).length;
                    const totalLessons = updatedModule.lessons.length;

                    if (completedLessons === totalLessons && updatedModule.quizzs?.length > 0) {
                        console.log('üéØ ƒê√£ ho√†n th√†nh to√†n b·ªô video, unlock quiz!');
                        unlockQuizForModule(updatedModule); // kh√¥ng c·∫ßn await
                    }
                }

                return updatedModules;
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i xem video:', error);
        }
    });



    useEffect(() => {
        initializeData();
    }, [courseId, moduleId, studentCourseId]);

    // Reset video khi lesson thay ƒë·ªïi
    useEffect(() => {
        if (selectedLesson && videoRef.current) {
            console.log('üé¨ B√†i h·ªçc m·ªõi ƒë∆∞·ª£c ch·ªçn, t·∫£i l·∫°i video:', selectedLesson.lessonName);
            videoRef.current.load(); // T·∫£i l·∫°i video
        }
    }, [selectedLesson?.id]);

    // Quiz timer countdown
    useEffect(() => {
        let interval = null;
        if (quizStarted && timeLeft > 0) {
            interval = setInterval(() => {
                setTimeLeft(time => {
                    if (time <= 1) {
                        handleSubmitQuiz();
                        return 0;
                    }
                    return time - 1;
                });
            }, 1000);
        }
        return () => clearInterval(interval);
    }, [quizStarted, timeLeft]);

    const initializeData = async () => {
        try {
            setLoading(true);
            const token = localStorage.getItem('token');

            if (!token) {
                navigate('/login');
                return;
            }

            if (!studentCourseId) {
                setError('Thi·∫øu th√¥ng tin studentCourseId');
                return;
            }

            // Get course completion data
            const response = await axios.get(
                `https://localhost:5000/api/CourseProgress/get-completion/${studentCourseId}`,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            if (response.data) {
                setCourseData(response.data.course);
                setModules(response.data.moduleCompletionVMs || []);
                setCourseProgressId(response.data.courseProgressId);

                // N·∫øu c√≥ moduleId tr√™n URL th√¨ m·ªü r·ªông module ƒë√≥
                if (moduleId) {
                    const module = response.data.moduleCompletionVMs?.find(m => m.id === parseInt(moduleId));
                    if (module) {
                        setExpandedModules(new Set([module.id]));
                        handleModuleSelect(module);
                    }
                } else {
                    // Kh√¥ng m·ªü r·ªông module n√†o khi m·ªõi v√†o trang
                    setExpandedModules(new Set());
                }
            }

        } catch (err) {
            console.error('Error initializing data:', err);
            setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu kh√≥a h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setLoading(false);
        }
    };

    const handleModuleToggle = (moduleId) => {
        const newExpanded = new Set(expandedModules);
        if (newExpanded.has(moduleId)) {
            newExpanded.delete(moduleId);
        } else {
            newExpanded.add(moduleId);
            const module = modules.find(m => m.id === moduleId);
            if (module && (!currentModule || currentModule.id !== moduleId)) {
                // Khi m·ªü r·ªông module-header, g·ªçi API InsertModuleProgress n·∫øu ch∆∞a c√≥ moduleProgressID
                const createModuleProgressIfNeeded = async () => {
                    let currentModuleProgressID = module.moduleProgressID;
                    if (!currentModuleProgressID || currentModuleProgressID === 0) {
                        if (!courseProgressId) {
                            console.error('‚ùå No courseProgressId available for creating module progress');
                            alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin ti·∫øn ƒë·ªô kh√≥a h·ªçc. Vui l√≤ng t·∫£i l·∫°i trang.');
                            return;
                        }
                        const token = localStorage.getItem('token');
                        const moduleProgressData = {
                            courseProcessId: parseInt(courseProgressId),
                            moduleId: parseInt(module.id)
                        };
                        try {
                            const moduleResponse = await axios.post(
                                'https://localhost:5000/api/CourseProgress/InsertModuleProgress',
                                moduleProgressData,
                                {
                                    headers: {
                                        'Authorization': `Bearer ${token}`,
                                        'Content-Type': 'application/json'
                                    }
                                }
                            );
                            currentModuleProgressID = moduleResponse.data?.id || moduleResponse.data;
                            // G·ªçi ngay get-completion ƒë·ªÉ l·∫•y l·∫°i moduleProgressId m·ªõi nh·∫•t t·ª´ backend
                            const completionRes = await axios.get(
                                `https://localhost:5000/api/CourseProgress/get-completion/${studentCourseId}`,
                                {
                                    headers: {
                                        'Authorization': `Bearer ${token}`,
                                        'Content-Type': 'application/json'
                                    }
                                }
                            );
                            const refreshedModule = completionRes.data.moduleCompletionVMs.find(m => m.id === module.id);
                            currentModuleProgressID = refreshedModule?.moduleProgressID || currentModuleProgressID;
                            // C·∫≠p nh·∫≠t module v·ªõi moduleProgressID m·ªõi
                            setModules(prev => prev.map(m =>
                                m.id === module.id ? { ...m, moduleProgressID: currentModuleProgressID } : m
                            ));
                        } catch (err) {
                            console.error('Error creating module progress:', err);
                        }
                    }
                    setCurrentModule({ ...module, moduleProgressID: currentModuleProgressID });
                    setLessons(module.lessons || []);
                    // Process quizzes for display only
                    if (module.quizzs && module.quizzs.length > 0) {
                        const processedQuizzes = module.quizzs.map(quiz => ({
                            id: quiz.id,
                            quizzName: quiz.title,
                            questionQuantity: quiz.questionCount || 0,
                            timeLimit: quiz.timeLimit || 30,
                            completed: quiz.userQuizzId ? true : false,
                            score: quiz.score,
                            userQuizzId: quiz.userQuizzId
                        }));
                        setQuizzes(processedQuizzes);
                    } else {
                        setQuizzes([]);
                    }
                    setContentType('module-overview');
                };
                createModuleProgressIfNeeded();
            }
        }
        setExpandedModules(newExpanded);
    };

    const handleModuleSelect = (module) => {
        console.log('üîç Module selected:', module);
        console.log('üìã Module lessons:', module.lessons);
        console.log('üß† Module quizzes:', module.quizzs);

        setCurrentModule(module);
        setLessons(module.lessons || []);

        // Process quizzes
        if (module.quizzs && module.quizzs.length > 0) {
            const processedQuizzes = module.quizzs.map(quiz => ({
                id: quiz.id,
                quizzName: quiz.title,
                questionQuantity: quiz.questionCount || 0,
                timeLimit: quiz.timeLimit || 30,
                completed: quiz.userQuizzId ? true : false,
                score: quiz.score,
                userQuizzId: quiz.userQuizzId
            }));
            console.log('‚úÖ Processed quizzes:', processedQuizzes);
            setQuizzes(processedQuizzes);
        } else {
            console.log('‚ùå No quizzes found in module');
            setQuizzes([]);
        }

        setContentType('module-overview');
    };

    const handleLessonItemClick = async (lesson, module) => {
        const token = localStorage.getItem('token');
        // Lu√¥n g·ªçi get-completion ƒë·ªÉ l·∫•y moduleProgressId m·ªõi nh·∫•t t·ª´ backend
        let moduleProgressId = null;
        try {
            const completionRes = await axios.get(
                `https://localhost:5000/api/CourseProgress/get-completion/${studentCourseId}`,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            const refreshedModule = completionRes.data.moduleCompletionVMs.find(m => m.id === module.id);
            moduleProgressId = refreshedModule?.moduleProgressID;
        } catch (err) {
            console.error('Error fetching moduleProgressId from get-completion:', err);
            return;
        }

        // G·ªçi InsertLessonProgress v·ªõi moduleProgressId m·ªõi l·∫•y ƒë∆∞·ª£c
        let lessonProgressId = lesson.lessonProgressId;
        if (!lessonProgressId || lessonProgressId === null) {
            lessonProgressId = await insertLessonProgress(lesson.id, moduleProgressId);
            setLessons(prevLessons => prevLessons.map(l =>
                l.id === lesson.id ? { ...l, lessonProgressId: lessonProgressId } : l
            ));
            setModules(prevModules => prevModules.map(m =>
                m.id === module.id
                    ? { ...m, lessons: m.lessons.map(l => l.id === lesson.id ? { ...l, lessonProgressId: lessonProgressId } : l) }
                    : m
            ));
        }

        if (lessonProgressId) {
            const lessonProgressData = {
                id: lessonProgressId,
                videoId: lesson.id,
                watchedDuration: lesson.watchedDuration || 0,
                status: lesson.status
            };
            setCurrentLessonProgress(lessonProgressData);
        }
        setSelectedLesson({ ...lesson, lessonProgressId: lessonProgressId });
        setContentType('video');
    };

    const insertLessonProgress = async (videoId) => {
        try {
            const token = localStorage.getItem('token');

            let currentModuleProgressID = currentModule?.moduleProgressID || moduleProgressID;

            if (!currentModuleProgressID || currentModuleProgressID === 0) {
                if (!courseProgressId) {
                    console.error('‚ùå No courseProgressId available for creating module progress');
                    alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin ti·∫øn ƒë·ªô kh√≥a h·ªçc. Vui l√≤ng t·∫£i l·∫°i trang.');
                    return null;
                }

                const moduleProgressData = {
                    courseProcessId: parseInt(courseProgressId),
                    moduleId: parseInt(currentModule.id)
                };

                const moduleResponse = await axios.post(
                    'https://localhost:5000/api/CourseProgress/InsertModuleProgress',
                    moduleProgressData,
                    {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                currentModuleProgressID = moduleResponse.data?.id || moduleResponse.data;

                setCurrentModule(prev => ({
                    ...prev,
                    moduleProgressID: currentModuleProgressID
                }));
            }

            const lessonProgressData = {
                moduleProgressId: parseInt(currentModuleProgressID),
                videoId: parseInt(videoId)
            };

            // G·ªçi API InsertLessonProgress
            await axios.post(
                'https://localhost:5000/api/CourseProgress/InsertLessonProgress',
                lessonProgressData,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            // G·ªçi l·∫°i API get-completion ƒë·ªÉ l·∫•y lessonProgressId m·ªõi nh·∫•t
            const completionRes = await axios.get(
                `https://localhost:5000/api/CourseProgress/get-completion/${studentCourseId}`,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            const refreshedModule = completionRes.data.moduleCompletionVMs.find(m => m.id === currentModule.id);
            const refreshedLesson = refreshedModule?.lessons?.find(l => l.id === videoId);
            const newLessonProgressId = refreshedLesson?.lessonProgressId;

            console.log('‚úÖ InsertLessonProgress + get-completion => lessonProgressId:', newLessonProgressId);

            return newLessonProgressId || null;

        } catch (err) {
            console.error('Error inserting lesson progress:', err);
            return null;
        }
    };


    const unlockQuizForModule = async (module) => {
        try {
            const token = localStorage.getItem('token');

            if (!token) {
                console.log('‚ùå No token found');
                return;
            }

            // Ensure we have moduleProgressId
            let currentModuleProgressID = module?.moduleProgressID || moduleProgressID;

            // If no moduleProgressId, create one first
            if (!currentModuleProgressID || currentModuleProgressID === 0) {
                // Check if we have courseProgressId
                if (!courseProgressId) {
                    console.error('‚ùå No courseProgressId available for quiz unlock');
                    alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin ti·∫øn ƒë·ªô kh√≥a h·ªçc. Vui l√≤ng t·∫£i l·∫°i trang.');
                    return;
                }
                console.log('üîß Creating module progress for quiz unlock...', {
                    courseProgressId: courseProgressId,
                    moduleId: module?.id,
                    moduleName: module?.moduleName
                });

                const moduleProgressData = {
                    courseProcessId: parseInt(courseProgressId),
                    moduleId: parseInt(module.id)
                };

                const moduleResponse = await axios.post(
                    'https://localhost:5000/api/CourseProgress/InsertModuleProgress',
                    moduleProgressData,
                    {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                currentModuleProgressID = moduleResponse.data?.id || moduleResponse.data;
                console.log('‚úÖ Created moduleProgressId for unlock:', currentModuleProgressID);
            }

            console.log('üîì Unlocking quiz with moduleProgressId:', currentModuleProgressID);

            const response = await axios.post(
                `https://localhost:5000/api/CourseProgress/user-quiz/${currentModuleProgressID}`,
                {},
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            console.log('‚úÖ Quiz unlocked successfully:', response.data);

            // Update current module with new moduleProgressID if created
            if (currentModule?.id === module.id) {
                setCurrentModule(prev => ({
                    ...prev,
                    moduleProgressID: currentModuleProgressID
                }));
            }

            // Show success message
            setSuccessMessage('Ch√∫c m·ª´ng! B·∫°n ƒë√£ m·ªü kh√≥a quiz cho module n√†y!');
            setShowMessage(true);

            setTimeout(() => {
                setShowMessage(false);
                setSuccessMessage('');
            }, 3000);

        } catch (err) {
            console.error('Error unlocking quiz:', err);
            console.error('Error response:', err.response);

            if (err.response?.status === 400) {
                console.log('‚ÑπÔ∏è Quiz might already be unlocked or not available');
            } else {
                console.log('‚ùå Failed to unlock quiz:', err.response?.data?.message || err.message);
            }
        }
    };

    const handleQuizClick = async (quiz = null, module = null) => {
        // ‚úÖ Lu√¥n d√πng module ƒë∆∞·ª£c truy·ªÅn v√†o, kh√¥ng ph·ª• thu·ªôc currentModule
        const targetModule = module || currentModule;

        if (!targetModule) {
            console.error('‚ùå Kh√¥ng c√≥ module ƒë·ªÉ x·ª≠ l√Ω quiz');
            return;
        }

        // üëá C·∫≠p nh·∫≠t module v√† b√†i h·ªçc trong UI (ƒë·ªÉ render ƒë√∫ng n·ªôi dung)
        setCurrentModule(targetModule);
        setLessons(targetModule.lessons || []);

        // üëá C·∫≠p nh·∫≠t quizzes hi·ªÉn th·ªã trong UI
        if (targetModule.quizzs && targetModule.quizzs.length > 0) {
            const processedQuizzes = targetModule.quizzs.map(q => ({
                id: q.id,
                quizzName: q.title,
                questionQuantity: q.questionCount || 0,
                timeLimit: q.timeLimit || 30,
                completed: q.userQuizzId ? true : false,
                score: q.score,
                userQuizzId: q.userQuizzId
            }));
            setQuizzes(processedQuizzes);
        } else {
            setQuizzes([]);
        }

        // ‚úÖ Ki·ªÉm tra ƒëi·ªÅu ki·ªán m·ªü quiz cho module n√†y
        const completedLessons = targetModule.lessons.filter(l => l.status).length;
        const totalLessons = targetModule.lessons.length;
        const moduleQuizUnlocked = completedLessons === totalLessons && totalLessons > 0;

        if (!moduleQuizUnlocked) {
            alert('B·∫°n c·∫ßn ho√†n th√†nh t·∫•t c·∫£ video b√†i h·ªçc tr∆∞·ªõc khi l√†m quiz.');
            return;
        }

        if (quiz) {
            setSelectedQuiz(quiz);
        }

        setContentType('quiz-intro');

        // ‚úÖ G·ªåI ƒë√∫ng quiz data theo ID module ƒë∆∞·ª£c truy·ªÅn v√†o
        await fetchQuizData(targetModule.id);
    };


    const fetchQuizData = async (moduleId = currentModule?.id) => {

        try {
            const token = localStorage.getItem('token');

            if (!token) {
                navigate('/login');
                return;
            }

            // Get quiz basic info from course completion data
            const response = await axios.get(
                `https://localhost:5000/api/CourseProgress/get-completion/${studentCourseId}`,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            if (response.data && response.data.moduleCompletionVMs) {
                const module = response.data.moduleCompletionVMs.find(m =>
                    m.id === moduleId
                );


                if (module && module.quizzs && module.quizzs.length > 0) {
                    const quiz = module.quizzs[0];

                    // Only set basic quiz info, questions will be loaded when starting quiz
                    const processedQuizData = {
                        id: quiz.id,
                        quizId: quiz.id,
                        userQuizzId: quiz.userQuizzId,
                        quizTitle: quiz.title,
                        title: quiz.title,
                        description: quiz.description || 'Ki·ªÉm tra ki·∫øn th·ª©c c·ªßa b·∫°n',
                        timeLimit: quiz.timeLimit || 30,
                        passingScore: quiz.requiredScore || 60,
                        questionCount: quiz.questionCount || 0,
                        questions: [], // Questions will be loaded in startQuiz
                        totalQuestions: quiz.questionCount || 0,
                        startAt: quiz.startAt,
                        submitAt: quiz.submitAt,
                        duration: quiz.duration,
                        score: quiz.score,
                        isPass: quiz.isPass
                    };

                    setQuizData(processedQuizData);

                    if (quiz.userQuizzId) {
                        setUserQuizId(quiz.userQuizzId);
                    }
                }
            }
        } catch (err) {
            console.error('Error fetching quiz data:', err);
        }
    };

    const startQuiz = async () => {
        try {
            console.log('üéØ === STARTING QUIZ DEBUG ===');
            console.log('üîç Current module:', currentModule);
            console.log('üîç Module ID:', currentModule?.id);
            console.log('üîç Module name:', currentModule?.moduleName);
            console.log('üîç Student course ID:', studentCourseId);

            const token = localStorage.getItem('token');
            console.log('üîê Token exists:', !!token);

            if (!token) {
                console.error('‚ùå No token found, redirecting to login');
                navigate('/login');
                return;
            }

            // Ensure we have moduleProgressId
            let currentModuleProgressID = currentModule?.moduleProgressID || moduleProgressID;
            console.log('üÜî ModuleProgressID check:', {
                fromCurrentModule: currentModule?.moduleProgressID,
                fromProps: moduleProgressID,
                final: currentModuleProgressID,
                courseProgressId: courseProgressId
            });

            if (!currentModuleProgressID) {
                // Check if we have courseProgressId before trying to create module progress
                if (!courseProgressId) {
                    console.error('‚ùå No courseProgressId available - cannot create module progress');
                    alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin ti·∫øn ƒë·ªô kh√≥a h·ªçc. Vui l√≤ng t·∫£i l·∫°i trang.');
                    return;
                }

                console.error('‚ùå No moduleProgressId available - will need to create one when starting lesson');
                alert('Vui l√≤ng ch·ªçn v√† xem m·ªôt video b√†i h·ªçc tr∆∞·ªõc khi l√†m quiz.');
                return;
            }

            console.log('üöÄ Starting/Resetting quiz with moduleProgressID:', currentModuleProgressID);

            // Step 1: POST to create/reset quiz
            console.log('üì§ STEP 1: Creating/resetting quiz');
            console.log('üì§ POST URL:', `https://localhost:5000/api/CourseProgress/user-quiz/${currentModuleProgressID}`);

            const createResponse = await axios.post(
                `https://localhost:5000/api/CourseProgress/user-quiz/${currentModuleProgressID}`,
                {},
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            console.log('‚úÖ POST Response Status:', createResponse.status);
            console.log('‚úÖ POST Response Data:', createResponse.data);
            console.log('‚úÖ POST Response Type:', typeof createResponse.data);

            // Check for both uppercase and lowercase 'id' fields
            const newUserQuizId = createResponse.data?.Id || createResponse.data?.id;

            if (newUserQuizId) {
                console.log('üÜî Got userQuizId from POST:', newUserQuizId);
                console.log('üÜî UserQuizId type:', typeof newUserQuizId);

                // Step 2: GET quiz questions from get-completion API 
                console.log('üì• STEP 2: Fetching quiz questions from get-completion');
                console.log('üì• GET URL:', `https://localhost:5000/api/CourseProgress/get-completion/${studentCourseId}`);

                const getResponse = await axios.get(
                    `https://localhost:5000/api/CourseProgress/get-completion/${studentCourseId}`,
                    {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                console.log('‚úÖ GET Response Status:', getResponse.status);
                console.log('‚úÖ GET Response Data:', getResponse.data);

                // Find current module and quiz data with questions
                const moduleData = getResponse.data?.moduleCompletionVMs?.find(m => m.id === currentModule.id);
                console.log('üîç Found module data:', moduleData);
                console.log('üîç Module has quizzes:', moduleData?.quizzs?.length || 0);

                const quizWithQuestions = moduleData?.quizzs?.[0];
                console.log('üß† Quiz with questions:', quizWithQuestions);
                console.log('üß† Quiz has questions:', quizWithQuestions?.questions?.length || 0);

                if (quizWithQuestions && quizWithQuestions.questions) {
                    console.log('‚úÖ Found quiz with questions, processing...');

                    // Map questions to expected format
                    const mappedQuestions = quizWithQuestions.questions.map(q => ({
                        id: q.id,
                        questionContent: q.questionContent, // Already correct field name
                        answers: (q.answers || []).map(a => ({
                            id: a.id,
                            answerContent: a.answerContent, // Already correct field name
                            isCorrect: a.isCorrect,
                            option: a.option
                        }))
                    }));

                    console.log('üìù Mapped questions count:', mappedQuestions.length);
                    console.log('üìù Sample mapped question:', mappedQuestions[0]);

                    if (mappedQuestions.length === 0) {
                        console.error('‚ùå No questions found after mapping');
                        alert('Quiz ch∆∞a c√≥ c√¢u h·ªèi. Vui l√≤ng li√™n h·ªá gi√°o vi√™n.');
                        return;
                    }

                    // Update quiz data with questions
                    console.log('üìä Updating quiz data with questions...');
                    setQuizData(prevData => ({
                        ...prevData,
                        questions: mappedQuestions,
                        totalQuestions: mappedQuestions.length,
                        userQuizzId: newUserQuizId
                    }));

                    // Set userQuizId for submission
                    setUserQuizId(newUserQuizId);

                    // Start quiz
                    const timeLimit = quizData?.timeLimit || 30;
                    console.log('‚è∞ Setting timer for:', timeLimit, 'minutes');
                    setTimeLeft(timeLimit * 60);
                    setQuizStarted(true);
                    setSelectedAnswers({});
                    setCurrentQuestionIndex(0);
                    setContentType('quiz-taking');

                    console.log('‚úÖ Quiz started successfully!');
                    console.log('‚úÖ UserQuizId:', newUserQuizId);
                    console.log('‚úÖ Questions loaded:', mappedQuestions.length);
                    console.log('‚úÖ Timer set to:', timeLimit * 60, 'seconds');
                } else {
                    console.error('‚ùå No quiz or questions found in API response');
                    console.error('‚ùå QuizWithQuestions:', quizWithQuestions);
                    console.error('‚ùå Questions array:', quizWithQuestions?.questions);
                    alert('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi t·ª´ server t·ª´ get-completion API.');
                }
            } else {
                console.error('‚ùå Invalid POST response - no userQuizId found');
                console.error('‚ùå Response data:', createResponse.data);
                console.error('‚ùå Expected field "Id" or "id" not found');
                console.error('‚ùå Available fields:', Object.keys(createResponse.data || {}));
                alert('Kh√¥ng th·ªÉ t·∫°o quiz. Vui l√≤ng th·ª≠ l·∫°i.');
            }

        } catch (err) {
            console.error('üö® === QUIZ START ERROR DETAILS ===');
            console.error('üö® Error object:', err);
            console.error('üö® Error message:', err.message);
            console.error('üö® Error response:', err.response);
            console.error('üö® Error response status:', err.response?.status);
            console.error('üö® Error response data:', err.response?.data);
            console.error('üö® Error response headers:', err.response?.headers);
            console.error('üö® Error config:', err.config);
            console.error('üö® === END ERROR DETAILS ===');

            let errorMessage = 'Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu quiz. ';
            if (err.response?.status === 400) {
                errorMessage += 'Module ch∆∞a ƒë∆∞·ª£c ho√†n th√†nh. Vui l√≤ng xem h·∫øt video b√†i h·ªçc tr∆∞·ªõc.';
                console.error('üö® Status 400: Module not completed');
            } else if (err.response?.status === 404) {
                errorMessage += 'Kh√¥ng t√¨m th·∫•y quiz cho module n√†y.';
                console.error('üö® Status 404: Quiz not found');
            } else if (err.response?.status === 401) {
                errorMessage += 'Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
                console.error('üö® Status 401: Unauthorized');
            } else if (err.response?.status === 500) {
                errorMessage += 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.';
                console.error('üö® Status 500: Server error');
            } else if (err.response?.data?.message) {
                errorMessage += err.response.data.message;
                console.error('üö® Custom error message:', err.response.data.message);
            } else {
                errorMessage += 'Vui l√≤ng th·ª≠ l·∫°i.';
                console.error('üö® Unknown error type');
            }

            alert(errorMessage);
        }
    };

    const handleAnswerSelect = async (questionId, answerId) => {
        setSelectedAnswers(prev => ({
            ...prev,
            [questionId]: answerId
        }));
    };

    const nextQuestion = () => {
        if (currentQuestionIndex < quizData.questions.length - 1) {
            setCurrentQuestionIndex(prev => prev + 1);
        }
    };

    const prevQuestion = () => {
        if (currentQuestionIndex > 0) {
            setCurrentQuestionIndex(prev => prev - 1);
        }
    };

    const handleSubmitQuiz = async () => {
        if (submitLoading) return;
        setSubmitLoading(true);
        try {
            const token = localStorage.getItem('token');
            if (Object.keys(selectedAnswers).length === 0) {
                alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c√¢u tr·∫£ l·ªùi tr∆∞·ªõc khi n·ªôp b√†i!');
                setSubmitLoading(false);
                return;
            }
            const answers = Object.entries(selectedAnswers).map(([questionId, selectedAnswerId]) => ({
                questionId: parseInt(questionId),
                selectedAnswerId: parseInt(selectedAnswerId)
            }));

            await axios.put(
                `https://localhost:5000/api/CourseProgress/user-quiz/${userQuizId}/answers`,
                { answers: answers },
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            setSuccessMessage('N·ªôp b√†i th√†nh c√¥ng! ƒêang c·∫≠p nh·∫≠t k·∫øt qu·∫£...');
            setShowMessage(true);

            setTimeout(() => {
                setShowMessage(false);
                setSuccessMessage('');
            }, 3000);

            setQuizStarted(false);
            setSelectedAnswers({});
            setCurrentQuestionIndex(0);
            setUserQuizId(null);
            setContentType('quiz-intro');

            // L·∫•y l·∫°i k·∫øt qu·∫£ quiz m·ªõi nh·∫•t t·ª´ API
            const completionRes = await axios.get(
                `https://localhost:5000/api/CourseProgress/get-completion/${studentCourseId}`,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            const refreshedModule = completionRes.data.moduleCompletionVMs.find(m => m.id === currentModule?.id);
            const refreshedQuiz = refreshedModule?.quizzs?.find(q => q.id === (selectedQuiz?.id || quizData?.id));

            // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i quiz trong modules ƒë·ªÉ sidebar ƒë·ªïi m√†u ngay
            setModules(prev =>
                prev.map(module =>
                    module.id === currentModule?.id
                        ? {
                            ...module,
                            quizzs: module.quizzs?.map(q =>
                                q.id === (selectedQuiz?.id || quizData?.id)
                                    ? {
                                        ...q,
                                        userQuizzId: refreshedQuiz?.userQuizzId,
                                        isPass: refreshedQuiz?.isPass,
                                        score: refreshedQuiz?.score
                                    }
                                    : q
                            )
                        }
                        : module
                )
            );

            // C·∫≠p nh·∫≠t l·∫°i quizData ƒë·ªÉ n·ªôi dung ch√≠nh hi·ªÉn th·ªã ƒë√∫ng
            setQuizData(prev => ({
                ...prev,
                userQuizzId: refreshedQuiz?.userQuizzId,
                isPass: refreshedQuiz?.isPass,
                score: refreshedQuiz?.score,
                submitAt: refreshedQuiz?.submitAt,
                duration: refreshedQuiz?.duration
            }));

        } catch (err) {
            console.error('Error submitting quiz:', err);
            alert('C√≥ l·ªói khi n·ªôp b√†i. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setSubmitLoading(false);
        }
    };

    const canTakeQuiz = () => {
        return currentModule?.moduleProgressID &&
            currentModule.moduleProgressID !== 0 &&
            lessons.length > 0 &&
            lessons.every(lesson => lesson.status === true);
    };

    const calculateModuleProgress = (module) => {
        if (!module.lessons || module.lessons.length === 0) return 0;
        const completedLessons = module.lessons.filter(lesson => lesson.status === true).length;
        return Math.round((completedLessons / module.lessons.length) * 100);
    };

    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    };

    const renderMainContent = () => {
        if (loading) {
            return (
                <div className="flex items-center justify-center h-full">
                    <div className="flex items-center gap-3">
                        <div className="w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu...</span>
                    </div>
                </div>
            );
        }

        if (error) {
            return (
                <div className="flex flex-col items-center justify-center h-full text-center">
                    <div className="text-6xl mb-4">‚ùå</div>
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">C√≥ l·ªói x·∫£y ra</h3>
                    <p className="text-gray-600">{error}</p>
                </div>
            );
        }

        switch (contentType) {
            case 'video':
                return renderVideoContent();
            case 'quiz-intro':
                return renderQuizIntro();
            case 'quiz-taking':
                return renderQuizTaking();
            default:
                return renderModuleOverview();
        }
    };

    const renderModuleOverview = () => {
        return (
            <div className="module-overview-content">
                <div className="overview-header">
                    <h2>üìö {currentModule?.moduleName || 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi kh√≥a h·ªçc'}</h2>
                    <p>Ch·ªçn m·ªôt video b√†i h·ªçc ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc t·∫≠p.</p>
                </div>

                {currentModule && (
                    <div className="module-stats">
                        <div className="stat-card">
                            <div className="stat-number">{calculateModuleProgress(currentModule)}%</div>
                            <div className="stat-label">Ho√†n th√†nh</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-number">{lessons.length}</div>
                            <div className="stat-label">Video b√†i h·ªçc</div>
                        </div>
                    </div>
                )}

                <div className="learning-tip">
                    üí° <strong>M·∫πo:</strong> Xem h·∫øt t·∫•t c·∫£ video ƒë·ªÉ m·ªü kh√≥a quiz ƒë√°nh gi√° cu·ªëi module
                </div>
            </div>
        );
    };

    const renderVideoContent = () => {
        if (!selectedLesson) return null;

        return (
            <div className="video-content">
                <div className="video-header-course">
                    <h1>{selectedLesson.videoNum}. {selectedLesson.lessonName}</h1>
                    <p>{selectedLesson.description}</p>
                </div>
                <div className="video-player-container">
                    {selectedLesson.securedVideoLink ? (
                        <video
                            key={selectedLesson.id} // Force re-render when lesson changes
                            ref={videoRef}
                            controls
                            width="100%"
                            height="500"
                            onPlay={handlePlay}
                            onPause={handlePause}
                            onTimeUpdate={handleTimeUpdate}
                            onEnded={handleEnded}
                            onLoadedMetadata={() => {
                                console.log('üì∫ Video loaded metadata for lesson:', selectedLesson.id);
                                initializeVideoProgress();
                            }}
                        >
                            <source src={selectedLesson.securedVideoLink} type="video/mp4" />
                            Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ video HTML5.
                        </video>
                    ) : (
                        <div className="video-placeholder" key={selectedLesson.id}>
                            <div className="play-icon">‚ñ∂Ô∏è</div>
                            <p>Video: {selectedLesson.lessonName}</p>
                            <p>Th·ªùi l∆∞·ª£ng: {selectedLesson.duration || '10:00'}</p>
                            <p>‚úÖ ƒê√£ ƒë√°nh d·∫•u ho√†n th√†nh khi click v√†o lesson</p>
                        </div>
                    )}
                </div>
                <div className="video-info">
                    {selectedLesson.description && (
                        <div className="lesson-description">
                            <h3>M√¥ t·∫£</h3>
                            <p>{selectedLesson.description}</p>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    const renderQuizIntro = () => {
        if (!quizData) {
            return (
                <div className="quiz-loading">
                    <div>ƒêang t·∫£i th√¥ng tin quiz...</div>
                </div>
            );
        }

        return (
            <div className="quiz-intro-content">
                <div className="quiz-header">
                    <h1>{quizData.title}</h1>
                    <p>{quizData.description}</p>
                </div>

                <div className="quiz-info-grid">
                    <div className="quiz-info-card">
                        <h3>üìã S·ªë c√¢u h·ªèi</h3>
                        <div className="info-value">{quizData.questionCount}</div>
                    </div>
                    <div className="quiz-info-card">
                        <h3>‚è±Ô∏è Th·ªùi gian</h3>
                        <div className="info-value">{quizData.timeLimit} ph√∫t</div>
                    </div>
                    <div className="quiz-info-card">
                        <h3>üéØ ƒêi·ªÉm qua</h3>
                        <div className="info-value">{quizData.passingScore}%</div>
                    </div>
                </div>

                {typeof quizData.isPass === 'boolean' ? (
                    <div
                        className="quiz-completed"
                        style={{
                            backgroundColor: quizData.isPass ? '#eafaf1' : '#fdecea',
                            border: `2px solid ${quizData.isPass ? '#27ae60' : '#e74c3c'}`
                        }}
                    >
                        <h3
                            style={{
                                color: quizData.isPass ? '#27ae60' : '#e74c3c',
                                fontWeight: 'bold'
                            }}
                        >
                            {quizData.isPass ? '‚úÖ Ho√†n th√†nh' : '‚ùå Kh√¥ng ƒë·∫°t'}
                        </h3>
                        <div className="result-summary">
                            <div className="result-item">
                                <span>ƒêi·ªÉm s·ªë:</span>
                                <strong>{quizData.score}%</strong>
                            </div>
                            <div className="result-item">
                                <span>K·∫øt qu·∫£:</span>
                                <strong
                                    className={quizData.isPass ? 'pass' : 'fail'}
                                    style={{ color: quizData.isPass ? '#27ae60' : '#e74c3c' }}
                                >
                                    {quizData.isPass ? 'ƒê·∫°t' : 'Kh√¥ng ƒë·∫°t'}
                                </strong>
                            </div>
                            {quizData.submitAt && (
                                <div className="result-item">
                                    <span>Th·ªùi gian n·ªôp b√†i:</span>
                                    <strong>{new Date(quizData.submitAt).toLocaleString('vi-VN')}</strong>
                                </div>
                            )}
                            {quizData.duration && (
                                <div className="result-item">
                                    <span>Th·ªùi gian l√†m b√†i:</span>
                                    <strong>{quizData.duration.toFixed(1)} ph√∫t</strong>
                                </div>
                            )}
                        </div>
                        <button
                            className="start-quiz-btn"
                            onClick={startQuiz}
                            style={{ marginTop: '20px', backgroundColor: '#f39c12' }}
                        >
                            üîÑ L√†m l·∫°i Quiz
                        </button>
                        <button
                            className="start-quiz-btn"
                            style={{ marginTop: '20px', backgroundColor: '#3498db', color: '#fff' }}
                            onClick={() => navigate('/quiz-complete', {
                                state: {
                                    studentCourseId,
                                    moduleId: currentModule?.id,
                                    userQuizzId: quizData?.userQuizzId
                                }
                            })}
                        >
                            üëÄ Xem chi ti·∫øt b√†i l√†m
                        </button>

                    </div>
                ) : (
                    <div className="quiz-start">
                        <div className="quiz-instructions">
                            <h3>üéØ H∆∞·ªõng d·∫´n l√†m b√†i</h3>
                            <ul>
                                <li>B·∫°n c√≥ {quizData.timeLimit} ph√∫t ƒë·ªÉ ho√†n th√†nh {quizData.questionCount} c√¢u h·ªèi</li>
                                <li>C·∫ßn ƒë·∫°t √≠t nh·∫•t {quizData.passingScore}% ƒë·ªÉ v∆∞·ª£t qua</li>
                                <li>B·∫°n c√≥ th·ªÉ xem l·∫°i c√¢u tr·∫£ l·ªùi sau khi ho√†n th√†nh</li>
                                <li>Kh√¥ng c√≥ gi·ªõi h·∫°n th·ªùi gian cho m·ªói c√¢u h·ªèi</li>
                            </ul>
                        </div>
                        <button
                            className="start-quiz-btn"
                            onClick={startQuiz}
                        >
                            üöÄ B·∫Øt ƒë·∫ßu Quiz
                        </button>
                    </div>
                )}
            </div>
        );
    };

    const renderQuizTaking = () => {
        if (!quizData || !quizData.questions || quizData.questions.length === 0) {
            return (
                <div className="quiz-loading">
                    <div>ƒêang t·∫£i c√¢u h·ªèi...</div>
                </div>
            );
        }

        const currentQuestion = quizData.questions[currentQuestionIndex];

        return (
            <div className="quiz-taking-content">
                {/* Quiz Header */}
                <div className="quiz-taking-header">
                    <div className="quiz-progress">
                        <span>C√¢u {currentQuestionIndex + 1} / {quizData.questions.length}</span>
                        <div className="progress-bar">
                            <div
                                className="progress-fill"
                                style={{ width: `${((currentQuestionIndex + 1) / quizData.questions.length) * 100}%` }}
                            ></div>
                        </div>
                    </div>
                    <div className="quiz-timer">
                        ‚è∞ {formatTime(timeLeft)}
                    </div>
                </div>

                {/* Question */}
                <div className="question-container">
                    <h2>C√¢u {currentQuestionIndex + 1}: {currentQuestion.questionContent}</h2>

                    <div className="answers-grid">
                        {currentQuestion.answers.map((answer) => (
                            <div
                                key={answer.id}
                                className={`answer-option ${selectedAnswers[currentQuestion.id] === answer.id ? 'selected' : ''}`}
                                onClick={() => handleAnswerSelect(currentQuestion.id, answer.id)}
                            >
                                <div className="answer-radio">
                                    {selectedAnswers[currentQuestion.id] === answer.id ? '‚óè' : '‚óã'}
                                </div>
                                <span className="answer-text">{answer.answerContent}</span>
                            </div>
                        ))}
                    </div>
                </div>

                {/* Navigation */}
                <div className="quiz-navigation">
                    <button
                        className="nav-btn prev-btn"
                        onClick={prevQuestion}
                        disabled={currentQuestionIndex === 0}
                    >
                        ‚Üê C√¢u tr∆∞·ªõc
                    </button>

                    <div className="question-indicators">
                        {quizData.questions.map((_, index) => (
                            <div
                                key={index}
                                className={`question-indicator ${index === currentQuestionIndex ? 'current' : ''
                                    } ${selectedAnswers[quizData.questions[index].id] ? 'answered' : ''}`}
                                onClick={() => setCurrentQuestionIndex(index)}
                            >
                                {index + 1}
                            </div>
                        ))}
                    </div>

                    {currentQuestionIndex === quizData.questions.length - 1 ? (
                        <button
                            className="nav-btn submit-btn"
                            onClick={handleSubmitQuiz}
                            disabled={submitLoading}
                        >
                            {submitLoading ? 'ƒêang n·ªôp...' : 'N·ªôp b√†i ‚úì'}
                        </button>
                    ) : (
                        <button
                            className="nav-btn next-btn"
                            onClick={nextQuestion}
                        >
                            C√¢u ti·∫øp ‚Üí
                        </button>
                    )}
                </div>
            </div>
        );
    };

    return (
        <div className="learning-interface">
            {/* Success Message */}
            {showMessage && successMessage && (
                <div className="success-message">
                    {successMessage}
                </div>
            )}

            {/* ChatBubble ch·ªâ hi·ªÉn th·ªã khi kh√¥ng ·ªü quiz */}
            {contentType !== 'quiz-intro' && contentType !== 'quiz-taking' && <ChatBubble />}

            {/* Sidebar */}
            <div className="modules-sidebar">
                {/* Header */}
                <div className="sidebar-header">
                    <div className="back-button-container-learning">
                        <button
                            onClick={() => navigate(-1)}
                            className="back-button-learning"
                        >
                            ‚Üê V·ªÅ trang kh√≥a h·ªçc
                        </button>
                    </div>
                    <h3>N·ªôi dung kh√≥a h·ªçc</h3>
                </div>

                {/* Module List */}
                <div className="modules-list">
                    {loading ? (
                        <div className="loading-container">
                            <span>ƒêang t·∫£i...</span>
                        </div>
                    ) : (
                        modules.map((module, index) => {
                            const isExpanded = expandedModules.has(module.id);
                            const progress = calculateModuleProgress(module);
                            const isCompleted = progress === 100;
                            const completedLessons = module.lessons?.filter(l => l.status).length || 0;
                            const totalLessons = module.lessons?.length || 0;

                            return (
                                <div key={module.id} className="module-item">
                                    <div
                                        className={`module-header ${isExpanded ? 'expanded' : ''}`}
                                        onClick={() => handleModuleToggle(module.id)}
                                    >
                                        <div className="module-toggle">
                                            {isExpanded ? '‚ñº' : '‚ñ∂'}
                                        </div>
                                        <div className="module-info">
                                            <div className="module-details">
                                                <h4>Module {index + 1}: {module.moduleName}</h4>
                                            </div>
                                        </div>
                                        <div className="module-progress">
                                            {completedLessons}/{totalLessons}
                                        </div>
                                    </div>

                                    {isExpanded && (
                                        <div className="module-content">
                                            {/* Lessons */}
                                            {module.lessons && module.lessons.map((lesson, lessonIndex) => (
                                                <div
                                                    key={lesson.id}
                                                    className={`lesson-item ${lesson.status ? 'completed' : ''} ${selectedLesson?.id === lesson.id ? 'active' : ''}`}
                                                    onClick={() => handleLessonItemClick(lesson, module)}
                                                >
                                                    <div className="lesson-icon">
                                                        {lesson.status ? '‚úì' : '‚ñ∂'}
                                                    </div>
                                                    <div className="lesson-info">
                                                        <h5>{lesson.title}</h5>
                                                    </div>
                                                </div>
                                            ))}
                                            {/* ƒê√≥ng map lesson tr∆∞·ªõc khi render quiz-section */}
                                            {module.quizzs && module.quizzs.length > 0 && (
                                                <div className="quiz-section">
                                                    {module.quizzs.map((quiz, quizIndex) => {
                                                        const isQuizUnlocked = completedLessons === totalLessons && totalLessons > 0;
                                                        const isQuizCompleted = quiz.userQuizzId && typeof quiz.isPass !== 'undefined';
                                                        const isQuizPassed = isQuizCompleted && quiz.isPass;
                                                        const isQuizFailed = isQuizCompleted && !quiz.isPass;

                                                        let bgColor = '#fff';
                                                        let borderColor = '#eee';
                                                        let icon = '?';
                                                        let titleColor = undefined;

                                                        if (isQuizPassed) {
                                                            bgColor = '#eafaf1';
                                                            borderColor = '#27ae60';
                                                            icon = '‚úì';
                                                            titleColor = '#27ae60';
                                                        } else if (isQuizFailed) {
                                                            bgColor = '#fdecea';
                                                            borderColor = '#e74c3c';
                                                            icon = '‚ùå';
                                                            titleColor = '#e74c3c';
                                                        } else if (!isQuizUnlocked) {
                                                            icon = 'üîí';
                                                        }

                                                        return (
                                                            <div
                                                                key={quiz.id}
                                                                className={`quiz-item lesson-item${isQuizPassed ? ' completed' : ''}${isQuizFailed ? ' fail' : ''}${!isQuizUnlocked ? ' locked' : ''}`}
                                                                style={{
                                                                    backgroundColor: bgColor,
                                                                    borderColor: borderColor
                                                                }}
                                                                onClick={() => {
                                                                    if (isQuizUnlocked) {
                                                                        handleQuizClick(quiz, module);
                                                                    } else {
                                                                        alert('H√£y ho√†n th√†nh t·∫•t c·∫£ video tr∆∞·ªõc khi l√†m quiz!');
                                                                    }
                                                                }}
                                                            >
                                                                <div className="lesson-icon">{icon}</div>
                                                                <div className="lesson-info">
                                                                    <h5
                                                                        className="quiz-title"
                                                                        style={{
                                                                            color: titleColor
                                                                        }}
                                                                    >
                                                                        {quiz.title}
                                                                    </h5>
                                                                </div>
                                                            </div>
                                                        );
                                                    })}
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </div>
                            );
                        })
                    )}
                </div>
            </div>

            {/* Main Content */}
            <div className="content-area">
                {renderMainContent()}
            </div>
        </div>
    );
};

export default LearningInterface;